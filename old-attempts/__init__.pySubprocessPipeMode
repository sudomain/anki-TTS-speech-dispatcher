# License: GNU AGPL, version 3 or later; http://www.gnu.org/licenses/agpl.html

"""
TODO add application name
TODO list voices with spd-say -L and parsing the output
subprocess spd-say version
TODO document multiple voices in README
TODO test stopping with an output modile known to support it such as espeak.

Speech Dispatcher is configured using separate config files. It allows for many customizations including different speech settings for different applications (Firefox, Emacs, and now Anki). It works with many TTS engines. If an engine is not already supported, the process of making a new one is relatively simple using the "generic output module". See the Configuration section of the speech-dispatcher Texinfo document for file locations and examples.

Heavily based on MacTTSPlayer(TTSProcessPlayer): https://github.com/ankitects/anki/blob/f9126927b1c537f76b2e11f2f8a6003d2313245b/qt/aqt/tts.py#L170
"""

import os
import sys
from concurrent.futures import Future
from dataclasses import dataclass
from typing import List, cast

from anki.lang import compatMap
from anki.sound import AVTag, TTSTag
from aqt import mw
from aqt.sound import OnDoneCallback, av_player
#from aqt.tts import TTSProcessPlayer, TTSVoice

import subprocess
import aqt.tts

# we subclass the default voice object to store the speechd language code
@dataclass
class SpeechDVoice(aqt.tts.TTSVoice):
    speechd_lang: str

#class SpeechDPlayer(TTSProcessPlayer):
class SpeechDPlayer(aqt.tts.TTSProcessPlayer):
    # this is called the first time Anki tries to play a TTS file
    def get_available_voices(self) -> List[aqt.tts.TTSVoice]:
        voices = []
        # add the voice using the name "speechd"
        voices.append(SpeechDVoice(name="speechd", lang="en_US", speechd_lang="en-us"))
        return voices  # type: ignore

    # this is called on a background thread, and will not block the UI
    def _play(self, tag: AVTag) -> None:
        #get the avtag
        assert isinstance(tag, TTSTag)
        match = self.voice_for_tag(tag)

        # is the field blank?
        if not tag.field_text.strip():
            return

        subprocess.run(["spd-say", "--application-name", "Anki", tag.field_text])
        #TODO pipe mode can be sent commands if the line starts with !-!, for instance !-!SET SELF VOICE FEMALE1. Use Python to prepend a space to deactivate commands
        """
        self._process = subprocess.Popen(
            ["spd-say", "--application-name", "Anki", "--pipe-mode"],
            stdin=subprocess.PIPE,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
        
        # write the input text to stdin
        self._process.stdin.write(tag.field_text.encode("utf8"))
        self._process.stdin.close()
        self._wait_for_termination(tag)
        """
        return

    # this is called on the main thread, after _play finishes
    # It seems it's only really necessary if the intention is to create temporary files. Instead, this add-on uses a subprocess.
    #def _on_done(self, ret: Future, cb: OnDoneCallback) -> None:
        #pass

    # we don't support stopping while the file is being downloaded
    # (but the user can interrupt playing after it has been downloaded)
    def stop(self):
        pass


# register our handler
av_player.players.append(SpeechDPlayer(mw.taskman))
